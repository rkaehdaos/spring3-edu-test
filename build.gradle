plugins {
    id 'java'
    id 'jacoco'
    id 'pmd'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.hibernate.orm' version '6.4.4.Final'
    id 'org.graalvm.buildtools.native' version '0.10.1'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain { languageVersion = JavaLanguageVersion.of(21) }
    sourceCompatibility = JavaVersion.VERSION_21
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    gradlePluginPortal()
}

ext {
    set('springBootAdminVersion', "3.2.3")
    set('springModulithVersion', "1.1.3")
}

dependencies {
//    implementation 'org.springframework.boot:spring-boot-starter-actuator'
//    implementation 'org.springframework.boot:spring-boot-starter-batch'
//    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//    implementation 'org.springframework.boot:spring-boot-starter-data-ldap'
//    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
//    implementation 'org.springframework.boot:spring-boot-starter-graphql'
//    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
//    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
//    implementation 'org.springframework.boot:spring-boot-starter-oauth2-authorization-server'
//    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
//    implementation 'org.springframework.boot:spring-boot-starter-security'
//    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
//    implementation 'org.springframework.boot:spring-boot-starter-web-services'
//    implementation 'de.codecentric:spring-boot-admin-starter-client'
//    implementation 'de.codecentric:spring-boot-admin-starter-server'
//    implementation 'io.micrometer:micrometer-tracing-bridge-brave'
//    implementation 'org.springframework.data:spring-data-rest-hal-explorer'
    implementation 'org.springframework.kafka:spring-kafka'
//    implementation 'org.springframework.modulith:spring-modulith-starter-core'
//    implementation 'org.springframework.modulith:spring-modulith-starter-jpa'
//    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
//    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
//    runtimeOnly 'io.micrometer:micrometer-registry-datadog'
//    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
    runtimeOnly 'org.postgresql:postgresql'
//    runtimeOnly 'org.springframework.modulith:spring-modulith-actuator'
//    runtimeOnly 'org.springframework.modulith:spring-modulith-observability'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
//    testImplementation 'com.unboundid:unboundid-ldapsdk'
//    testImplementation 'org.springframework:spring-webflux'
//    testImplementation 'org.springframework.batch:spring-batch-test'
//    testImplementation 'org.springframework.graphql:spring-graphql-test'
//    testImplementation 'org.springframework.kafka:spring-kafka-test'
//    testImplementation 'org.springframework.modulith:spring-modulith-starter-test'
//    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:kafka'
    testImplementation 'org.testcontainers:mysql'
    testImplementation 'org.testcontainers:postgresql'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

}

dependencyManagement {
    imports {
        mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
        mavenBom "org.springframework.modulith:spring-modulith-bom:${springModulithVersion}"
    }
}

//test{} 와 tasks.named('test') {}의 차이
//test{}: 기본 test task 직접 구성, 선언적(평가 단계에서 해당 task 있다고 가정 -> 정의 되어 있어야 한다)
//tasks.named('test')
// - gradle 5.1 이상
// - lazy task 구성 : 실제 실행되거나 다른 task에 의해 실제로 참조 될 때까지 구성 연기
// - 빌드 성능 향상 가능, task  의존성 복잡한 대규모 유리

tasks.named('compileJava') {
    dependsOn clean
}

// pmd
pmd {
    toolVersion = "7.0.0"
    consoleOutput = true
    ignoreFailures = true
    incrementalAnalysis = true
    ruleSets = []
    ruleSetFiles = files(rootProject.file(".github/pmd/ruleset.xml") as Object)
}
tasks.named('pmdMain') {
    includes = ['**/*']
//    ruleSetFiles = files(rootProject.file(".github/pmd/ruleset.xml") as Object)
}

tasks.named('pmdTest') {
    excludes = ['**/*']
}

tasks.named('test') {
    dependsOn pmdMain
    useJUnitPlatform() // Junit5 사용: 테스트 종속성에 JUnit Jupiter API와 JUnit Jupiter Engine을 포함해야 함.
    maxParallelForks = Runtime.runtime.availableProcessors()
    finalizedBy jacocoTestCoverageVerification
}
tasks.named('nativeTest') {
    dependsOn test
    finalizedBy jacocoTestCoverageVerification
}


hibernate { enhancement { enableAssociationManagement.convention(true) } }

graalvmNative {
    binaries {
        main {}
        test {
//            buildArgs.add("--parallelism=29") // Thread count, 기본값은 max
//            메모리 할당 : GRADLE이 판단해서 너무 높거나 하면 알아서 조절
//            buildArgs.add("-J-Xmx38G") // GIGA
//            buildArgs.add("-J-XX:MaxRAMPercentage=55.0") // PERCENT
        }
        configureEach {
            verbose = true
            buildArgs.add("-H:-CheckToolchain")
        }
    }
}


jacocoTestReport {
    reports { csv.setRequired(true) }
}
jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule { limit { minimum = 0.8 } }
        rule {
            enabled = false // rule 비활성화 -> 해당 룰이 적용되지 않음
            element = 'CLASS'
            includes = ['com.example.spring3edutest.*'] //해당 패키지의 CLASS에 룰 적용

            limit {
                counter = 'Line'
                value = 'TOTALCOUNT'
                minimum = 0.1
                maximum = 0.5
            }
        }
    }
}