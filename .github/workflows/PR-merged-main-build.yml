name: 'NativeBuild On PR Merge'

on:
  pull_request:
    branches: [ main ]
    types: [ closed ]

# TODO
# Profile-Guided Optimizations (PGO) 적용 필요
#  추가 고려사항 예시
#  부하 테스트 스크립트 실행 방법
#
#  프로파일 데이터의 정확한 위치 및 사용 방법
#
#  프로젝트에 맞는 네이티브 이미지 빌드 옵션 조정

jobs:
  build:
    name: Native Build on ${{ matrix.os }}
    if: github.event.pull_request.merged == true
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout source code
        uses: actions/checkout@master

      # https://github.com/marketplace/actions/github-action-for-graalvm
      - name: 'graalvm jdk21 setup'
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'graalvm'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          native-image-job-reports: 'true'
          cache: 'gradle'

      - name: get project version
        id: get_version
        run: echo "::set-output name=version::$(./gradlew properties -q | grep 'version:' | cut -d ' ' -f2)"
        shell: bash

      - name: Example step
        run: |
          echo "GRAALVM_HOME: $GRAALVM_HOME"
          echo "JAVA_HOME: $JAVA_HOME"
          javac --version
          java --version
          native-image --version
          gradle -v

      - name: Native Build step using Gradle plugin
        run: |
          echo "Available processors: $(nproc)"
          ./gradlew nativeCompile --no-daemon --parallel --scan

      - name: Generate JaCoCo Badge
        id: jacoco
        uses: cicirello/jacoco-badge-generator@v2.11.0
        with:
          jacoco-csv-file: build/reports/jacoco/test/jacocoTestReport.csv
          generate-coverage-badge: true
          coverage-badge-filename: jacoco.svg
          generate-branches-badge: true
          branches-badge-filename: branches.svg
          generate-coverage-endpoint: false
          coverage-endpoint-filename: jacoco.json
          generate-branches-endpoint: false
          branches-endpoint-filename: branches.json
          generate-summary: false
          summary-filename: coverage-summary.json
          coverage-label: '전체 커버리지'
          branches-label: '브렌치 커버리지'
          colors: '#4c1 #97ca00 #a4a61d #dfb317 #fe7d37 #e05d44'
          intervals: 100 90 80 70 60 0
          on-missing-report: fail
          fail-if-coverage-less-than: 70
          fail-if-branches-less-than: 80
          fail-on-coverage-decrease: false
          fail-on-branches-decrease: false
          generate-workflow-summary: true
          workflow-summary-heading: '테스트 커버리지 요약'

      - name: Log coverage percentage
        run: |
          echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
          echo "branch coverage = ${{ steps.jacoco.outputs.branches }}"

      - name: Commit and push the badge (if it changed)
        uses: EndBug/add-and-commit@v9
        with:
          default_author: github_actions
          message: '[actions skip] commit badge'
          add: '*.svg'

      - name: '실패 시 보고서 업로드'
        uses: actions/upload-artifact@v4
        if: (matrix.os == 'ubuntu-latest') && (failure())
        with:
          name: report-jacoco-pmd
          path: |
            build/reports/jacoco/test/html
            build/reports/pmd/*.html

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: spring3-edu-test-${{ steps.get_version.outputs.version }}-${{ matrix.os }}
          path: build/native/nativeCompile/spring3-edu-test*

      - name: Notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: custom
          author_name: nativeTest-${{matrix.os}}-workflow bot
          fields: repo,message,commit,author,eventName,ref,workflow,job,took
          custom_payload: |
            {
              attachments: [{
                color: '${{ job.status }}' === 'success' ? 'good' : '${{ job.status }}' === 'failure' ? 'danger' : 'warning',
                text: `${process.env.AS_WORKFLOW} - ${{matrix.os}}\n${process.env.AS_JOB} (${process.env.AS_COMMIT}) of ${process.env.AS_REPO}@${process.env.AS_REF} by ${process.env.AS_AUTHOR} ${{ job.status }} in ${process.env.AS_TOOK}`,
              }]
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
# TODO
#          make release if merged
#
#  release:
#    needs: build
#    runs-on: ubuntu-latest
#    steps:
#
#      - name: Create release
#        id: create_release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: ${{ steps.get_version.outputs.version }}
#          release_name: Release ${{ steps.get_version.outputs.version }}
#          draft: true
#          prerelease: false
#
#      - name: Download artifact (Ubuntu)
#        uses: actions/download-artifact@v2
#        with:
#          name: spring3-edu-test-ubuntu-latest
#
#      - name: Download artifact (Windows)
#        uses: actions/download-artifact@v2
#        with:
#          name: spring3-edu-test-windows-latest
#
#      - name: Download artifact (Windows)
#        uses: actions/download-artifact@v2
#        with:
#          name: spring3-edu-test-windows-latest
#
#
#      - name: Upload release asset
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: ./my-artifact
#          asset_name: my-artifact.zip
#          asset_content_type: application/zip
#


